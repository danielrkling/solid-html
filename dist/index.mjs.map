{"version":3,"file":"index.mjs","names":["value: any","component: T","props: MaybeFunctionProps<ComponentProps<T>>","fn: T","props: TProps","when: () => boolean","children: MaybeFunction<JSX.Element>","fallback?: MaybeFunction<JSX.Element>","_Show","when: () => T","children: JSX.Element | ((item: NonNullable<T>) => JSX.Element)","fallback: MaybeFunction<JSX.Element>","_Switch","when: () => T | undefined | null | false","children: JSX.Element | ((item: T) => JSX.Element)","_Match","each: () => T | false | null | undefined","children: (item: T[number], index: () => number) => JSX.Element","_For","children: (item: () => T[number], index: number) => JSX.Element","_Index","_Suspense","fallback:\n    | MaybeFunction<JSX.Element>\n    | ((err: any, reset: () => void) => JSX.Element)","_ErrorBoundary","context: _Context<T>","value: T | (() => T)","children: () => JSX.Element","marker","strings: TemplateStringsArray","type: ResultType","attrNames: Array<string>","html","rawTextEndRegex: RegExp | undefined","attrName: string | undefined","match!: RegExpExecArray | null","htmlResult: string","strings: TemplateStringsArray","type: ResultType","html","elem: Element","name: string","value: any","marker","strings","strings: TemplateStringsArray","xml","arr: any","value: any","jsx: ReturnType<typeof XML>","cached: NodeList","values: any[]","node: any","x: string","userComponents: Record<string, any>","template: TemplateStringsArray","userComponents"],"sources":["../src/util.ts","../src/h.ts","../src/components.ts","../src/lit-html.ts","../src/html.ts","../src/xml.ts"],"sourcesContent":["export function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\";\n}\n\nexport const doc = document\n\n","import {\n  createComponent,\n  type ComponentProps,\n  type JSX,\n  type ValidComponent,\n} from \"solid-js\";\nimport { spread, SVGElements } from \"solid-js/web\";\nimport { doc, isFunction, isString } from \"./util\";\n\n\n/**\n * A value or a function returning a value. Used for reactive or static props.\n * @example\n * type X = MaybeFunction<string>; // string | () => string\n */\nexport type MaybeFunction<T> = T | (() => T);\n\n\n/**\n * Props where each value can be a value or a function, except for event handlers and refs.\n * @example\n * type P = MaybeFunctionProps<{ foo: number; onClick: () => void }>\n */\nexport type MaybeFunctionProps<T extends Record<string, any>> = {\n  [K in keyof T]: K extends `on${string}` | \"ref\" ? T[K] : MaybeFunction<T[K]>;\n};\n\n\n/**\n * Hyperscript function for Solid-compatible components and elements. Accepts a component or tag name, props, and children.\n * Children passed as arguments override `children` in props.\n * @example\n * h(\"button\", { onClick: () => alert(\"Hi\") }, \"Click Me\")\n * h(MyComponent, { foo: 1 }, html`<span>Child</span>`)\n */\nexport function h<T extends ValidComponent>(\n  component: T,\n  props: MaybeFunctionProps<ComponentProps<T>>,\n  ...children: JSX.Element[]\n): JSX.Element {\n  //children in spread syntax override children in props\n  if (children.length === 1) {\n    //@ts-expect-error\n    props.children = children[0];\n  } else if (children.length > 1) {\n    //@ts-expect-error\n    props.children = children;\n  }\n\n  if (isString(component)) {\n    const elem = doc.createElement(component);\n    spread(elem, props, SVGElements.has(component));\n    return elem;\n  } else if (isFunction(component)) {\n    return createComponent(component, wrapProps(props));\n  }\n}\n\n\nconst markedOnce = new WeakSet();\n\n/**\n * Marks a function so it is not wrapped as a getter by h().\n * Useful for event handlers or functions that should not be auto-accessed.\n * @example\n * once(() => doSomething())\n */\nexport function once<T extends (...args: any[]) => any>(fn: T): T {\n  markedOnce.add(fn);\n  return fn;\n}\n\n\n/**\n * Internal: Replaces accessor props with getters for reactivity, except for refs and event handlers.\n */\nfunction wrapProps<\n  TComponent extends ValidComponent,\n  TProps extends MaybeFunctionProps<ComponentProps<TComponent>>\n>(props: TProps = {} as TProps): ComponentProps<TComponent> {\n  for (const [key, descriptor] of Object.entries(\n    Object.getOwnPropertyDescriptors(props)\n  )) {\n    const value = descriptor.value;\n    if (\n      key !== \"ref\" &&\n      key.slice(0, 2) !== \"on\" &&\n      isFunction(value) &&\n      value.length === 0 &&\n      !markedOnce.has(value)\n    ) {\n      Object.defineProperty(props, key, {\n        get() {\n          return value();\n        },\n        enumerable: true,\n      });\n    }\n  }\n  return props as ComponentProps<TComponent>;\n}\n","import {\n  type Context as _Context,\n  ErrorBoundary as _ErrorBoundary,\n  For as _For,\n  Index as _Index,\n  Match as _Match,\n  Show as _Show,\n  Suspense as _Suspense,\n  Switch as _Switch,\n  type JSX,\n} from \"solid-js\";\nimport { MaybeFunction, h, once } from \"./h\";\n\n/**\n * Solid-compatible Show component. Renders children if `when` is truthy, otherwise renders `fallback`.\n * @example\n * Show(() => isVisible(), html`<span>Hello</span>`, \"Fallback\")\n */\nexport function Show(\n  when: () => boolean,\n  children: MaybeFunction<JSX.Element>,\n  fallback?: MaybeFunction<JSX.Element>\n): JSX.Element {\n  return h(_Show, {\n    when,\n    children,\n    fallback,\n    //@ts-expect-error\n    keyed: false,\n  });\n}\n\n/**\n * Show component with keyed mode. Renders children with keyed context if `when` is truthy.\n * @example\n * ShowKeyed(() => user(), user => html`<span>${user.name}</span>`, \"No user\")\n */\nexport function ShowKeyed<T>(\n  when: () => T,\n  children: JSX.Element | ((item: NonNullable<T>) => JSX.Element),\n  fallback?: MaybeFunction<JSX.Element>\n): JSX.Element {\n  return h(_Show, {\n    when,\n    //@ts-expect-error\n    children,\n    fallback,\n    keyed: true,\n  });\n}\n\n/**\n * Switch component for conditional rendering. Renders the first matching child, or `fallback` if none match.\n * @example\n * Switch(\"No match\", Match(() => cond1(), html`A`), Match(() => cond2(), html`B`))\n */\nexport function Switch(\n  fallback: MaybeFunction<JSX.Element>,\n  ...children: JSX.Element[]\n): JSX.Element {\n  return h(_Switch, { children, fallback });\n}\n\n/**\n * Match component for use inside Switch. Renders children if `when` is truthy.\n * @example\n * Match(() => value() === 1, html`One`)\n */\nexport function Match<T>(\n  when: () => T | undefined | null | false,\n  children: JSX.Element | ((item: T) => JSX.Element)\n): JSX.Element {\n  //@ts-expect-error\n  return h(_Match, { when, children, keyed: false });\n}\n\n/**\n * Keyed Match component for use inside Switch. Renders children with keyed context if `when` is truthy.\n * @example\n * MatchKeyed(() => user(), user => html`<span>${user.name}</span>`)\n */\nexport function MatchKeyed<T>(\n  when: () => T | undefined | null | false,\n  children: JSX.Element | ((item: T) => JSX.Element)\n): JSX.Element {\n  // @ts-expect-error\n  return h(_Match, { when, children, keyed: true });\n}\n\n/**\n * For component for iterating over arrays. Renders children for each item in `each`.\n * @example\n * For(() => items(), (item) => html`<li>${item}</li>`)\n */\nexport function For<T extends readonly any[]>(\n  each: () => T | false | null | undefined,\n  children: (item: T[number], index: () => number) => JSX.Element,\n  fallback?: MaybeFunction<JSX.Element>\n): JSX.Element {\n  return h(_For, {\n    get each() {\n      return each();\n    },\n    children: once(children),\n    fallback,\n  });\n}\n\n/**\n * Index component for iterating over arrays by index. Renders children for each item in `each`.\n * @example\n * Index(() => items(), (item, i) => html`<li>${item()}</li>`)\n */\nexport function Index<T extends readonly any[]>(\n  each: () => T | false | null | undefined,\n  children: (item: () => T[number], index: number) => JSX.Element,\n  fallback?: MaybeFunction<JSX.Element>\n): JSX.Element {\n  return h(_Index, {\n    get each() {\n      return each();\n    },\n    children: once(children),\n    fallback,\n  });\n}\n\n/**\n * Suspense component for async boundaries. Renders `children` or `fallback` while loading.\n * @example\n * Suspense(html`<div>Loaded</div>`, html`<div>Loading...</div>`)\n */\nexport function Suspense(\n  children: MaybeFunction<JSX.Element>,\n  fallback?: MaybeFunction<JSX.Element>\n): JSX.Element {\n  return h(_Suspense, { children, fallback });\n}\n\n/**\n * ErrorBoundary component. Catches errors in children and renders `fallback` on error.\n * @example\n * ErrorBoundary(html`<App />`, (err) => html`<div>Error: ${err.message}</div>`)\n */\nexport function ErrorBoundary(\n  children: MaybeFunction<JSX.Element>,\n  fallback:\n    | MaybeFunction<JSX.Element>\n    | ((err: any, reset: () => void) => JSX.Element)\n): JSX.Element {\n  return h(_ErrorBoundary, { children, fallback });\n}\n\n/**\n * Context provider component. Provides a context value to all children.\n * @example\n * Context(MyContext, value, () => html`<Child />`)\n */\nexport function Context<T>(\n  context: _Context<T>,\n  value: T | (() => T),\n  children: () => JSX.Element\n): JSX.Element {\n  return h(context.Provider, { value, children });\n}\n","// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nexport const boundAttributeSuffix = \"$lit$\";\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nexport const marker = `lit$marker$`;\n\n// String used to tell if a comment is a marker comment\nexport const markerMatch = \"?\" + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nexport const nodeMarker = `<${markerMatch}>`;\n\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  \"g\"\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nexport const HTML_RESULT = 1;\nexport const SVG_RESULT = 2;\nexport const MATHML_RESULT = 3;\n\nexport type ResultType = typeof HTML_RESULT | typeof SVG_RESULT | typeof MATHML_RESULT;\n\n\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nexport const getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [string, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html =\n    type === SVG_RESULT ? \"<svg>\" : type === MATHML_RESULT ? \"<math>\" : \"\";\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === \"!--\") {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, \"g\");\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === \">\") {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith(\"/>\") ? \" \" : \"\";\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string =\n    html +\n    (strings[l] || \"<?>\") +\n    (type === SVG_RESULT ? \"</svg>\" : type === MATHML_RESULT ? \"</math>\" : \"\");\n\n  // Returned as an array for terseness\n  return [htmlResult, attrNames];\n};\n","import { type JSX } from \"solid-js\";\nimport {\n  DelegatedEvents,\n  SVGElements,\n  addEventListener,\n  assign,\n  delegateEvents,\n  effect,\n  insert,\n  setAttribute,\n  setBoolAttribute,\n  setProperty,\n} from \"solid-js/web\";\nimport {\n  HTML_RESULT,\n  MATHML_RESULT,\n  ResultType,\n  SVG_RESULT,\n  boundAttributeSuffix,\n  getTemplateHtml,\n  marker,\n  markerMatch,\n} from \"./lit-html\";\nimport { doc, isFunction } from \"./util\";\n\n\ntype Template = [\n  element: HTMLTemplateElement,\n  attributes: string[]\n]\n\nconst walker = doc.createTreeWalker(doc, 129);\n\n\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Returns a parsed template and its bound attributes for a given template string and type.\n * @internal\n */\nfunction getTemplate(strings: TemplateStringsArray, type: ResultType): Template {\n  let template = templateCache.get(strings);\n  if (template === undefined) {\n    const [html, attributes] = getTemplateHtml(strings, type);\n    const element = doc.createElement(\"template\");\n    element.innerHTML = html;\n    template = [element, attributes];\n    templateCache.set(strings, template);\n  }\n  return template;\n}\n\n/**\n * Assigns a property, attribute, boolean, or event handler to an element, supporting reactivity.\n * @internal\n */\nfunction assignAttribute(elem: Element, name: string, value: any) {\n  if (name[0] === \"@\") {\n    const event = name.slice(1);\n    let delegate = DelegatedEvents.has(event);\n    addEventListener(elem, event, value, delegate);\n    if (delegate) delegateEvents([event]);\n    elem.removeAttribute(name);\n  } else if (name[0] === \".\") {\n    if (isFunction(value)) {\n      effect(() => {\n        setProperty(elem, name.slice(1), value());\n      });\n    } else {\n      setProperty(elem, name.slice(1), value);\n    }\n    elem.removeAttribute(name);\n  } else if (name[0] === \"?\") {\n    if (isFunction(value)) {\n      effect(() => setBoolAttribute(elem, name.slice(1), value()));\n    } else {\n      setBoolAttribute(elem, name.slice(1), value);\n    }\n  } else {\n    if (isFunction(value)) {\n      effect(() => setAttribute(elem, name, value()));\n    } else {\n      setAttribute(elem, name, value);\n    }\n  }\n}\n\n\n/**\n * Creates a tagged template function for html/svg/mathml templates with Solid reactivity.\n * @internal\n */\nfunction createHtml(type: ResultType){\n  return function html(\n    strings: TemplateStringsArray,\n    ...values: any[]\n  ): JSX.Element {\n    function render() {\n      const [element,attributes] = getTemplate(strings, type);\n      const clone = element.content.cloneNode(true);\n  \n      let valueIndex = 0;\n      let boundAttributeIndex = 0;\n      walker.currentNode = clone;\n  \n      while (walker.nextNode()) {\n        const node = walker.currentNode;\n        if (node.nodeType === 1) {\n          for (const attr of [...(node as Element).attributes]) {\n            if (attr.name.endsWith(boundAttributeSuffix)) {\n              //Bound attribute/prop/event\n              if (attr.value === marker) {\n                assignAttribute(node as Element, attributes[boundAttributeIndex++], values[valueIndex++]);\n              } else {\n                const strings = attr.value.split(marker);\n                let parts = [strings[0]] as any[];\n                for (let j = 1; j < strings.length; j++) {\n                  parts.push(values[valueIndex++], strings[j]);\n                }\n                assignAttribute(node as Element, attributes[boundAttributeIndex++], () =>\n                  parts.map((v) => (isFunction(v) ? v() : v)).join(\"\")\n                );\n              }\n              (node as Element).removeAttribute(attr.name);\n            } else if (attr.name === `...${marker}`) {\n              //Spread\n              const isSvg = SVGElements.has((node as Element).tagName);\n              const value = values[valueIndex++];\n              if (isFunction(value)) {\n                effect(() => assign(node as Element, value(), isSvg, true));\n              } else {\n                assign(node as Element, value, isSvg, true);\n              }\n              (node as Element).removeAttribute(attr.name);\n            } else if (attr.name.startsWith(marker)) {\n              //Refs\n              const value = values[valueIndex++];\n              if (isFunction(value)) {\n                value(node as Element);\n              }\n              (node as Element).removeAttribute(attr.name);\n            }\n          }\n  \n        } else if (node.nodeType === 8) {\n          if (node.nodeValue === markerMatch) {\n            node.nodeValue = marker + valueIndex  //I don't know why, but this prevents misplaced elements\n            const value = values[valueIndex++];\n            const parent = node.parentNode;\n            if (parent) insert(parent, value, node);\n          }\n        }\n      }\n      if (type === SVG_RESULT || type === MATHML_RESULT) {\n        return [...clone.firstChild!.childNodes]\n      }\n      return [...clone.childNodes];\n    }\n    return render as unknown as JSX.Element;\n  }\n}\n\n\n/**\n * Tagged template for creating reactive HTML templates with Solid. Use for DOM elements only.\n *\n * @example\n * html`<div class=\"foo\">${bar}</div>`\n * html`<button @click=${onClick}>Click</button>`\n */\nexport const html = createHtml(HTML_RESULT)\n\n/**\n * Tagged template for creating reactive SVG templates with Solid. Use inside <svg> only.\n *\n * @example\n * svg`<circle cx=\"10\" cy=\"10\" r=\"5\" />`\n */\nexport const svg = createHtml(SVG_RESULT)\n\n/**\n * Tagged template for creating reactive MathML templates with Solid. Use inside <math> only.\n *\n * @example\n * mathml`<math><mi>x</mi></math>`\n */\nexport const mathml = createHtml(MATHML_RESULT)\n\n\n\n","\nimport {\n    ErrorBoundary,\n    For,\n    Index,\n    Match,\n    Show,\n    Suspense,\n    Switch,\n} from 'solid-js'\nimport {h} from './h'\nimport { Dynamic, NoHydration, Portal } from 'solid-js/web'\nimport { doc, isFunction } from './util'\n\n\n\n\n/**\n * Default registry of built-in Solid control flow and utility components for XML templates.\n */\nconst defaultRegistry = {\n    For,\n    Index,\n    Match,\n    Suspense,\n    ErrorBoundary,\n    Show,\n    Switch,\n    Dynamic,\n    Portal,\n    NoHydration\n}\n\nconst xmlns = ['on', 'prop', 'bool', 'attr']\n    .map(ns => `xmlns:${ns}=\"/\"`)\n    .join(' ')\n\nconst marker = 'MARKER46846'\nconst markerRX = new RegExp(`(${marker})`, 'g')\nconst markerAttr = new RegExp(`=${marker}`, 'g')\n\n\n\nconst xmlCache = new WeakMap<TemplateStringsArray, Node>();\n\n/**\n * Parses a template string as XML and returns the child nodes, using a cache for performance.\n * @internal\n */\nfunction getXml(strings: TemplateStringsArray) {\n    let xml = xmlCache.get(strings);\n    if (xml === undefined) {\n        const contents = strings.join(marker).replace(markerAttr, `=\"${marker}\"`)\n        const parser = new DOMParser();\n        xml = parser.parseFromString(\n            `<xml ${xmlns}>${contents}</xml>`,\n            'text/xml',\n        ).firstChild!;\n        xmlCache.set(strings, xml)\n    }\n    return xml.childNodes;\n}\n\nconst flat = (arr: any) => (arr.length === 1 ? arr[0] : arr)\nfunction getValue(value: any) {\n    while (isFunction(value)) value = value()\n    return value\n}\nconst toArray = Array.from\n\n/**\n * Converts parsed XML nodes and values into Solid hyperscript calls.\n * @internal\n */\nfunction toH(jsx: ReturnType<typeof XML>, cached: NodeList, values: any[]) {\n    let index = 0\n    function nodes(node: any) {\n        // console.log(node)\n        if (node.nodeType === 1) {\n            // element\n            const tagName = node.tagName\n\n            // gather props\n            const props = {} as Record<string, any>\n            for (let { name, value } of node.attributes) {\n                if (value === marker) {\n                    value = values[index++]\n                } else if (value.includes(marker)) {\n                    const val = value\n                        .split(markerRX)\n                        .map((x: string) => (x === marker ? values[index++] : x))\n\n                    value = () => val.map(getValue).join('')\n                }\n                props[name] = value\n            }\n\n\n            // gather children\n            const childNodes = node.childNodes\n            if (childNodes.length) {\n                props.children = ()=>flat(toArray(childNodes).map(nodes).filter(n => n))\n            }\n\n            ; /[A-Z]/.test(tagName) &&\n                !jsx.components[tagName] &&\n                console.warn(`xml: Forgot to jsx.define({ ${tagName} })?`)\n\n            return h(jsx.components[tagName] || tagName, props)\n        } else if (node.nodeType === 3) {\n            // text\n\n            const value = node.nodeValue\n            if (value.trim() === marker) {\n                return (values[index++])\n            }\n            return value.includes(marker)\n                ? value\n                    .split(markerRX)\n                    .map((x: string) => (x === marker ? values[index++] : x))\n                : value\n        } else if (node.nodeType === 8) {\n            // comment\n            const value = node.nodeValue\n            if (value.includes(marker)) {\n                const val = value\n                    .split(markerRX)\n                    .map((x: string) => (x === marker ? values[index++] : x))\n                return () => doc.createComment(val.map(getValue).join(''))\n            } else {\n                return doc.createComment(value)\n            }\n        } else {\n            console.error(`xml: nodeType not supported ${node.nodeType}`)\n        }\n    }\n\n    return flat(toArray(cached).map(nodes))\n}\n\n\n\n/**\n * Creates an XML template tag function for Solid, supporting custom component registries.\n * Use `xml.define({ ... })` to add or override components.\n *\n * @example\n * const xml = XML({ MyComponent })\n * xml`<MyComponent foo=\"bar\">${child}</MyComponent>`\n *\n * @param userComponents Custom components to add to the registry.\n * @returns An xml template tag function.\n */\nexport function XML(userComponents: Record<string, any> = {}) {\n    function xml(template: TemplateStringsArray, ...values: any[]) {\n        return toH(xml, getXml(template), values)\n    }\n\n    xml.components = { ...defaultRegistry }\n    xml.define = (userComponents: Record<string, any>) => {\n        for (const name in userComponents) {\n            xml.components[name] = userComponents[name]\n        }\n        return xml\n    }\n    xml.define(userComponents)\n\n    return xml\n}\n\n\n/**\n * Default XML template tag for Solid, with built-in registry. Use `xml.define` to add components.\n *\n * @example\n * xml`<For each=${list}>${item => xml`<div>${item}</div>`}</For>`\n */\nexport const xml = XML()\n\n"],"mappings":"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"}