{"version":3,"file":"components.mjs","names":["when: () => T","children: (item: Accessor<NonNullable<T>>)=>JSX.Element","fallback?: ()=>JSX.Element","_Show","children: ((item: NonNullable<T>) => JSX.Element)","children: ()=>JSX.Element[]","fallback: ()=>JSX.Element","_Switch","children: ((item: Accessor<NonNullable<T>>) => JSX.Element)","_Match","each: () => T | false | null | undefined","children: (item: T[number], index: () => number) => JSX.Element","_For","children: (item: () => T[number], index: number) => JSX.Element","_Index","children: ()=>JSX.Element","_Suspense","fallback: ((err: any, reset: () => void) => JSX.Element)","_ErrorBoundary","context: _Context<T>","value: T","children: () => JSX.Element"],"sources":["../src/components.ts"],"sourcesContent":["import {\r\n  type Context as _Context,\r\n  ErrorBoundary as _ErrorBoundary,\r\n  For as _For,\r\n  Index as _Index,\r\n  Match as _Match,\r\n  Show as _Show,\r\n  Suspense as _Suspense,\r\n  Switch as _Switch,\r\n  createComponent,\r\n  JSX,\r\n  Accessor,\r\n} from \"solid-js\";\r\n\r\n/**\r\n * Solid-compatible Show component. Renders children if `when` is truthy, otherwise renders `fallback`.\r\n * @example\r\n * Show(() => isVisible(), html`<span>Hello</span>`, \"Fallback\")\r\n */\r\nexport function Show<T>(\r\n  when: () => T,\r\n  children: (item: Accessor<NonNullable<T>>)=>JSX.Element,\r\n  fallback?: ()=>JSX.Element\r\n): JSX.Element {\r\n  return createComponent(_Show, {\r\n    get when() {\r\n      return when();\r\n    },\r\n    //@ts-expect-error\r\n    children,\r\n    get fallback(){\r\n      return fallback?.()\r\n    },\r\n    //@ts-expect-error\r\n    keyed: false,\r\n  });\r\n}\r\n\r\n\r\n\r\n/**\r\n * Show component with keyed mode. Renders children with keyed context if `when` is truthy.\r\n * @example\r\n * ShowKeyed(() => user(), user => html`<span>${user.name}</span>`, \"No user\")\r\n */\r\nexport function ShowKeyed<T>(\r\n  when: () => T,\r\n  children: ((item: NonNullable<T>) => JSX.Element),\r\n  fallback?: ()=>JSX.Element\r\n): JSX.Element {\r\n  return createComponent(_Show, {\r\n    get when() {\r\n      return when();\r\n    },\r\n    //@ts-expect-error\r\n    children,\r\n    get fallback(){\r\n      return fallback?.()\r\n    },\r\n    keyed: true,\r\n  });\r\n}\r\n\r\n/**\r\n * Switch component for conditional rendering. Renders the first matching child, or `fallback` if none match.\r\n * @example\r\n * Switch(\"No match\", Match(() => cond1(), html`A`), Match(() => cond2(), html`B`))\r\n */\r\nexport function Switch(\r\n  children: ()=>JSX.Element[],\r\n  fallback: ()=>JSX.Element,  \r\n): JSX.Element {\r\n  return createComponent(_Switch, {\r\n    get fallback() {\r\n      return fallback();\r\n    },\r\n    get children(){\r\n      return children()\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Match component for use inside Switch. Renders children if `when` is truthy.\r\n * @example\r\n * Match(() => value() === 1, html`One`)\r\n */\r\nexport function Match<T>(\r\n  when: () => T,\r\n  children: ((item: Accessor<NonNullable<T>>) => JSX.Element)\r\n): JSX.Element {\r\n  return createComponent(_Match, {\r\n    get when() {\r\n      return when();\r\n    },\r\n    //@ts-expect-error\r\n    children,\r\n  });\r\n}\r\n\r\n/**\r\n * Keyed Match component for use inside Switch. Renders children with keyed context if `when` is truthy.\r\n * @example\r\n * MatchKeyed(() => user(), user => html`<span>${user.name}</span>`)\r\n */\r\nexport function MatchKeyed<T>(\r\n  when: () => T,\r\n  children: ((item: NonNullable<T>) => JSX.Element)\r\n): JSX.Element {\r\n  return createComponent(_Match, {\r\n    get when() {\r\n      return when();\r\n    },\r\n    //@ts-expect-error\r\n    children,\r\n    keyed: true\r\n  });\r\n}\r\n\r\n/**\r\n * For component for iterating over arrays. Renders children for each item in `each`.\r\n * @example\r\n * For(() => items(), (item) => html`<li>${item}</li>`)\r\n */\r\nexport function For<T extends readonly any[]>(\r\n  each: () => T | false | null | undefined,\r\n  children: (item: T[number], index: () => number) => JSX.Element,\r\n  fallback?: ()=>JSX.Element\r\n): JSX.Element {\r\n  return createComponent(_For, {\r\n    get each() {\r\n      return each();\r\n    },\r\n    children,\r\n    get fallback() {\r\n      return fallback?.();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Index component for iterating over arrays by index. Renders children for each item in `each`.\r\n * @example\r\n * Index(() => items(), (item, i) => html`<li>${item()}</li>`)\r\n */\r\nexport function Index<T extends readonly any[]>(\r\n  each: () => T | false | null | undefined,\r\n  children: (item: () => T[number], index: number) => JSX.Element,\r\n  fallback?: ()=>JSX.Element\r\n): JSX.Element {\r\n  return createComponent(_Index, {\r\n    get each() {\r\n      return each();\r\n    },\r\n    children,\r\n    get fallback() {\r\n      return fallback?.()\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Suspense component for async boundaries. Renders `children` or `fallback` while loading.\r\n * @example\r\n * Suspense(html`<div>Loaded</div>`, html`<div>Loading...</div>`)\r\n */\r\nexport function Suspense(\r\n  children: ()=>JSX.Element,\r\n  fallback?: ()=>JSX.Element\r\n): JSX.Element {\r\n  return createComponent(_Suspense, {\r\n    get children() {\r\n      return children()\r\n    },\r\n    get fallback() {\r\n      return fallback?.()\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * ErrorBoundary component. Catches errors in children and renders `fallback` on error.\r\n * @example\r\n * ErrorBoundary(html`<App />`, (err) => html`<div>Error: ${err.message}</div>`)\r\n */\r\nexport function ErrorBoundary(\r\n  children: ()=>JSX.Element,\r\n  fallback: ((err: any, reset: () => void) => JSX.Element)\r\n): JSX.Element {\r\n  return createComponent(_ErrorBoundary, {\r\n    get children() {\r\n      return children()\r\n    },\r\n    fallback\r\n  });\r\n}\r\n\r\n/**\r\n * Context provider component. Provides a context value to all children.\r\n * @example\r\n * Context(MyContext, value, () => html`<Child />`)\r\n */\r\nexport function Context<T>(\r\n  context: _Context<T>,\r\n  value: T,\r\n  children: () => JSX.Element\r\n): JSX.Element {\r\n  return createComponent(context.Provider, {\r\n    get children() {\r\n      return children()\r\n    },\r\n    value\r\n  });\r\n}\r\n"],"mappings":"iIAmBA,SAAgB,EACdA,EACAC,EACAC,EACa,CACb,OAAO,EAAgBC,EAAO,CAC5B,IAAI,MAAO,CACT,OAAO,GAAM,AACd,EAED,WACA,IAAI,UAAU,CACZ,OAAO,KAAY,AACpB,EAED,MAAO,EACR,EAAC,AACH,CASD,SAAgB,EACdH,EACAI,EACAF,EACa,CACb,OAAO,EAAgBC,EAAO,CAC5B,IAAI,MAAO,CACT,OAAO,GAAM,AACd,EAED,WACA,IAAI,UAAU,CACZ,OAAO,KAAY,AACpB,EACD,MAAO,EACR,EAAC,AACH,CAOD,SAAgB,EACdE,EACAC,EACa,CACb,OAAO,EAAgBC,EAAS,CAC9B,IAAI,UAAW,CACb,OAAO,GAAU,AAClB,EACD,IAAI,UAAU,CACZ,OAAO,GAAU,AAClB,CACF,EAAC,AACH,CAOD,SAAgB,EACdP,EACAQ,EACa,CACb,OAAO,EAAgBC,EAAQ,CAC7B,IAAI,MAAO,CACT,OAAO,GAAM,AACd,EAED,UACD,EAAC,AACH,CAOD,SAAgB,EACdT,EACAI,EACa,CACb,OAAO,EAAgBK,EAAQ,CAC7B,IAAI,MAAO,CACT,OAAO,GAAM,AACd,EAED,WACA,MAAO,EACR,EAAC,AACH,CAOD,SAAgB,EACdC,EACAC,EACAT,EACa,CACb,OAAO,EAAgBU,EAAM,CAC3B,IAAI,MAAO,CACT,OAAO,GAAM,AACd,EACD,WACA,IAAI,UAAW,CACb,OAAO,KAAY,AACpB,CACF,EAAC,AACH,CAOD,SAAgB,EACdF,EACAG,EACAX,EACa,CACb,OAAO,EAAgBY,EAAQ,CAC7B,IAAI,MAAO,CACT,OAAO,GAAM,AACd,EACD,WACA,IAAI,UAAW,CACb,OAAO,KAAY,AACpB,CACF,EAAC,AACH,CAOD,SAAgB,EACdC,EACAb,EACa,CACb,OAAO,EAAgBc,EAAW,CAChC,IAAI,UAAW,CACb,OAAO,GAAU,AAClB,EACD,IAAI,UAAW,CACb,OAAO,KAAY,AACpB,CACF,EAAC,AACH,CAOD,SAAgB,EACdD,EACAE,EACa,CACb,OAAO,EAAgBC,EAAgB,CACrC,IAAI,UAAW,CACb,OAAO,GAAU,AAClB,EACD,UACD,EAAC,AACH,CAOD,SAAgB,EACdC,EACAC,EACAC,EACa,CACb,OAAO,EAAgB,EAAQ,SAAU,CACvC,IAAI,UAAW,CACb,OAAO,GAAU,AAClB,EACD,OACD,EAAC,AACH"}